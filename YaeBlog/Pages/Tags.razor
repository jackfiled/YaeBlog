@page "/blog/tags/"
@using System.Text.Encodings.Web
@using YaeBlog.Abstraction
@using YaeBlog.Models

@inject IEssayContentService Contents
@inject NavigationManager NavigationInstance

<PageTitle>
    @(TagName ?? "标签")
</PageTitle>

<div class="flex flex-col">
    <div>
        @if (TagName is null)
        {
            <h1 class="text-4xl">标签</h1>
        }
        else
        {
            <h2 class="text-2xl">@(TagName)</h2>
        }
    </div>

    <div class="py-4">
        <span class="italic">
            在野外游荡的指针，走向未知的方向。٩(๑˃̵ᴗ˂̵๑)۶
        </span>
    </div>

    @if (TagName is null)
    {
        <div>
            <ul>
                @foreach (KeyValuePair<EssayTag, List<BlogEssay>> pair in
                          Contents.Tags.OrderByDescending(pair => pair.Value.Count))
                {
                    <li class="p-2">
                        <div class="flex flex-row">
                            <a href="/blog/tags/?tagName=@(pair.Key.UrlEncodedTagName)">
                                <div class="text-sky-600 text-lg">
                                    # @(pair.Key.TagName)
                                </div>
                            </a>

                            <div class="mx-2 px-1 text-lg bg-gray-300 rounded-lg">
                                @(pair.Value.Count)
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <div class="container">
            @foreach (BlogEssay essay in _essays)
            {
                <EssayCard Essay="@essay"/>
            }
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery] public string? TagName { get; set; }

    private readonly List<BlogEssay> _essays = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (string.IsNullOrEmpty(TagName))
        {
            return;
        }

        if (!Contents.SearchByUrlEncodedTag(UrlEncoder.Default.Encode(TagName), out List<BlogEssay>? essays))
        {
            NavigationInstance.NavigateTo("/NotFound");
            return;
        }

        _essays.AddRange(essays.OrderDescending());
    }

}
